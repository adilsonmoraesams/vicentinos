{
    "Init new function": {
        "prefix": "repx",
        "body": [
            "namespace App\\Data;",
            "",
            "use App\\Models\\;",
            "use Exception;",
            "use PDO;",
            "use PDOException;",
            "use System\\Database;",
            "use System\\Logs;",
            "",
            "class $1Repository",
            "{",
            "    private $$conn;",
            "",
            "    public function __construct()",
            "    {",
            "        $$db = new Database();",
            "        $$this->conn = $$db->getInstance();",
            "    }",
            "",
            "",
            "    /* ",
            "    * Listar todos",
            "    */",
            "    public function get$2()",
            "    {",
            "        try {",
            "",
            "            $$stmt = $$this->conn->query('SELECT * FROM $1');",
            "",
            "            return $$stmt->fetchAll(PDO::FETCH_ASSOC);",
            "        } catch (Exception $$e) {",
            "            Logs::Registrar($$e->getMessage());",
            "            throw new Exception('Erro ao listar editar cliente:' . $$e->getMessage());",
            "        }",
            "    }",
            "",
            "    /* ",
            "    * Listar todos",
            "    */",
            "    public function getById$2($$id)",
            "    {",
            "        try {",
            "",
            "            $$stmt = $$this->conn->prepare(' SELECT * FROM $1 WHERE Id = :Id ');",
            "            $$stmt->bindValue(':Id', $$id);",
            "            $$stmt->execute();",
            "            return $$stmt->fetch(PDO::FETCH_ASSOC);",
            "            // return $$this->toObject($$result);",
            "        } catch (Exception $$e) {",
            "            Logs::Registrar($$e->getMessage());",
            "            throw new Exception('Erro ao consultar editar cliente:' . $$e->getMessage());",
            "        }",
            "    }",
            "",
            "",
            "    /* ",
            "    * Inclusão de $2",
            "    */",
            "    public function Insert$1($$1 $$3)",
            "    {",
            "        try {",
            "            $$this->conn->beginTransaction();",
            "",
            "            $$stmt = $$this->conn->prepare(",
            "                'INSERT INTO $1 (Nome, DataNascimento) VALUES (:Nome, :DataNascimento)'",
            "            );",
            "",
            "            $$stmt->bindValue(':Nome', $$cliente->Nome);",
            "            $$stmt->bindValue(':DataNascimento', $$cliente->DataNascimento);",
            "            $$stmt->execute();",
            "",
            "            $$this->conn->commit();",
            "",
            "            return $$this->getById$2($$this->conn->lastInsertId());",
            "        } catch (Exception $$e) {",
            "            Logs::Registrar($$e->getMessage());",
            "            throw new Exception('Erro ao incluir editar $3:' . $$e->getMessage());",
            "        }",
            "    }",
            "",
            "",
            "    /* ",
            "    * Editar de $3",
            "    */",
            "    public function Editar$1($$1 $$3, $$id)",
            "    {",
            "        try {",
            "            $$this->conn->beginTransaction();",
            "",
            "            $$stmt = $$this->conn->prepare(",
            "                'UPDATE  $1 SET ",
            "                    Nome = :Nome, ",
            "                    DataNascimento = :DataNascimento",
            "                WHERE",
            "                    Id = :Id '",
            "            );",
            "",
            "            $$stmt->bindValue(':Id', $$id);",
            "            $$stmt->bindValue(':Nome', $$3->Nome);",
            "            $$stmt->bindValue(':DataNascimento', $$3->DataNascimento);",
            "            $$stmt->execute();",
            "",
            "            $$this->conn->commit();",
            "",
            "            return $$this->getById$2($$id);",
            "        } catch (Exception $$e) {",
            "            Logs::Registrar($$e->getMessage());",
            "            throw new Exception('Erro ao tentar editar $3:' . $$e->getMessage());",
            "        }",
            "    }",
            "",
            "",
            "    /* ",
            "    * Inclusão de $3",
            "    */",
            "    public function Excluir$1($$1 $$3)",
            "    {",
            "        try {",
            "            $$this->conn->beginTransaction();",
            "",
            "            $$stmt = $$this->conn->prepare(",
            "                'DELETE FROM $1 WHERE Id = :Id '",
            "            );",
            "            $$stmt->bindParam(':Id', $$3->Id);",
            "            $$stmt->execute();",
            "",
            "            $$this->conn->commit();",
            "        } catch (PDOException $$e) {",
            "            Logs::Registrar($$e->getMessage());",
            "            throw new Exception('Erro ao tentar excluído $3:' . $$e->getMessage());",
            "        }",
            "    }",
            " ",
            "",
            "}",
        ],
        "description": "Init new function"
    }
}